service: basic-lambda-api
frameworkVersion: '3'
useDotenv: true

provider:
  name: aws
  runtime: nodejs18.x
  region: ${env:AWS_ACCOUNT_REGION}
  stage: v1

  iam:
    role:
      managedPolicies:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy"

      statements:
        # S3
        - Effect: 'Allow'
          Action:
            - s3:*
          Resource:
            - "arn:aws:s3:::${env:S3_NAME_PRIVATE_FILES}/*"

      # DynamoDB
        - Effect: Allow
          Action:
            - dynamo:*
          Resource:
            - "arn:aws:dynamodb:${env:AWS_ACCOUNT_REGION}:${env:AWS_ACCOUNT_ID}:table/${env:DYNAMO_TABLE_NAME}"

  environment:
    ENVIRONMENT           : ${env:ENVIRONMENT}
    AWS_ACCOUNT_ID        : ${env:AWS_ACCOUNT_ID}
    AWS_ACCOUNT_REGION    : ${env:AWS_ACCOUNT_REGION}
    DYNAMO_TABLE_NAME     : ${env:DYNAMO_TABLE_NAME}
    S3_NAME_PRIVATE_FILES : ${env:S3_NAME_PRIVATE_FILES}

custom:
  serverless-offline:
    httpPort: 3003
    lambdaPort: 4003

plugins:
  - serverless-offline
  - serverless-plugin-typescript

functions:
  api:
    handler: src/handler.run
    events:
      - http:
          path: /{proxy+}
          method: ANY
          cors:
            origin: '*'

package:
  excludeDevDependencies: true
